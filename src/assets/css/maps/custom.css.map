{"version":3,"sources":["custom.css","custom.sass","../__config/_config.sass","__global/_colors.sass","__global/_grid.sass","__global/_spacers.sass","__global/_typography.sass","../../components/alerts/_alerts.sass","../../components/buttons/_buttons.sass","../../components/form-fields/_form-fields.sass","../../components/icons/_icons.sass","../../components/images/_images.sass"],"names":[],"mappings":"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","file":"../custom.css","sourcesContent":["@charset \"UTF-8\";\n/* *\n *\n * Generate custom styles to assets/custom.css\n *\n * */\n/* Import settings */\n/* Automatically generate upon config.json */\n/* Colors */\n/* Grid */\n/* Spacers */\n/* Typography */\n/* Import global functions and mixins */\n/* *\n *\n * Global functions and mixins to operate with colors\n *\n * */\n/* Functions ---------------------------------------------------------------------------------------*/\n/* Returns css var according to color scheme. Fallback is defined in config.json */\n/* Mixins ------------------------------------------------------------------------------------------*/\n/* *\n *\n * Global functions and mixins to assist working with grid or other layout elements\n *\n * */\n/* Functions ---------------------------------------------------------------------------------------*/\n/* Mixins ------------------------------------------------------------------------------------------*/\n/* Media queries\n *\n * Example: 'md' breakpoint = 768px, 'lg' = 992px, so:\n *\n * +screen(md)       —   768px   <=   screen                    // so it starts FROM md and higher\n * +screen-max(md)   —   0       <    screen   <=   991px      // so it is from 0 up to INCLUDING MD\n * +screen-only(md)  —   768px   <=   screen   <=   991px\n *\n * */\n/* Portrait and Landscape screens */\n/* IE and Edge */\n/* *\n *\n * Hide content. With option 'only' works only on exact breakpoint. Option 'only' can have any value, e.g. '+hide(sm, any word)'\n *\n * */\n/* *\n *\n * Keep fixed width for .col-*-* at minimum breakpoint width.\n * Use for first col in row only!\n *\n * */\n/* Floats for .col-*-* */\n/* *\n *\n * Global functions and mixins for keeping margins in paddings in one size system\n *\n * */\n/* Functions ---------------------------------------------------------------------------------------*/\n/* *\n *\n * Returns calculated space based on $spacer (8px by default).\n * Shoule be used carefully when predefined margins and paddings are not enough\n *\n * */\n/* Mixins ------------------------------------------------------------------------------------------*/\n/* Margins and paddings, but don't use it for .wrapper and .container */\n/* Type 'stretch' is good for horizontally grown element, 'squish' — for vertically grown */\n/* *\n *\n * Global functions and mixins for typography.\n * Multipliers for functions should be quarters or at least halfs (1.25, 1.5) to keep the rhythm.\n * But at the end of the day it is already a part of design so it is totally up to you\n *\n * */\n/* Functions ---------------------------------------------------------------------------------------*/\n/* Returns calculated font-size based on 'font-size-base' in config.json */\n/* Returns calculated line-height based on 'line-height-base' in config.json  */\n/* Mixins ------------------------------------------------------------------------------------------*/\n/* Import custom styles for components, layouts and pages */\n.alert {\n  margin-top: 8px;\n  margin-bottom: 8px;\n  padding: 8px 16px;\n  position: relative;\n  display: inline-block;\n  line-height: 150%;\n  background: rgba(var(--c-gray-1), 1);\n  color: rgba(var(--c-black), 1);\n  border-radius: 4px; }\n  @media only screen and (min-width: 576px) {\n    .alert {\n      padding: 12px 24px; } }\n  .alert span.icon {\n    width: 24px;\n    height: 24px;\n    margin-right: 24px;\n    position: absolute;\n    top: 50%;\n    left: 24px;\n    margin-top: -12px;\n    margin-left: -12px; }\n  .alert--fullwidth {\n    width: 100%; }\n  .alert--has-icon {\n    padding-left: 48px; }\n  .alert--brand {\n    background: rgba(var(--c-brand-l-5), 1);\n    color: rgba(var(--c-brand-d-5), 1); }\n    .alert--brand svg {\n      fill: rgba(var(--c-brand-d-5), 1); }\n  .alert--accent {\n    background: rgba(var(--c-accent-l-5), 1);\n    color: rgba(var(--c-accent-d-5), 1); }\n    .alert--accent svg {\n      fill: rgba(var(--c-accent-d-5), 1); }\n  .alert--success {\n    background: rgba(var(--c-success-l-5), 1);\n    color: rgba(var(--c-success-d-5), 1); }\n    .alert--success svg {\n      fill: rgba(var(--c-success-d-5), 1); }\n  .alert--warning {\n    background: rgba(var(--c-warning-l-5), 1);\n    color: rgba(var(--c-warning-d-5), 1); }\n    .alert--warning svg {\n      fill: rgba(var(--c-warning-d-5), 1); }\n  .alert--danger {\n    background: rgba(var(--c-danger-l-5), 1);\n    color: rgba(var(--c-danger-d-5), 1); }\n    .alert--danger svg {\n      fill: rgba(var(--c-danger-d-5), 1); }\n  .alert--info {\n    background: rgba(var(--c-info-l-5), 1);\n    color: rgba(var(--c-info-d-5), 1); }\n    .alert--info svg {\n      fill: rgba(var(--c-info-d-5), 1); }\n  .alert--interactive {\n    background: rgba(var(--c-interactive-l-5), 1);\n    color: rgba(var(--c-interactive-d-5), 1); }\n    .alert--interactive svg {\n      fill: rgba(var(--c-interactive-d-5), 1); }\n\n/* Define basic button styles, which don't depend on sizes */\n.button {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: auto;\n  margin-bottom: 16px;\n  line-height: 150%;\n  vertical-align: top;\n  border: 0;\n  border-radius: 4px;\n  outline: 0;\n  cursor: pointer;\n  transform-origin: center center;\n  transition: all 0.05s;\n  background: #ccc;\n  /* Styling according to the \"default\" color scheme. Affects on svg icons too */\n  /* Creates classes like .button--COLORNAME */\n  /* Button States */\n  /* Loading class */ }\n  .button--icon-only {\n    padding: 0;\n    overflow: hidden; }\n  .button--icon > .icon,\n  .button--icon-only > .icon {\n    position: absolute;\n    top: 50%; }\n  .button--icon-only > .icon {\n    left: 50%; }\n  .button--round.button--icon-only {\n    border-radius: 50%; }\n  .button > span.desc {\n    display: block;\n    font-size: 0.75em; }\n  .button[disabled] {\n    cursor: not-allowed;\n    pointer-events: none;\n    opacity: 0.85; }\n    .button[disabled] > .icon {\n      opacity: 0.5; }\n  .button--brand {\n    background: rgba(var(--c-brand), 1);\n    color: #000; }\n    .button--brand svg {\n      fill: #000; }\n  .button--accent {\n    background: rgba(var(--c-accent), 1);\n    color: #000; }\n    .button--accent svg {\n      fill: #000; }\n  .button--success {\n    background: rgba(var(--c-success), 1);\n    color: #000; }\n    .button--success svg {\n      fill: #000; }\n  .button--warning {\n    background: rgba(var(--c-warning), 1);\n    color: #000; }\n    .button--warning svg {\n      fill: #000; }\n  .button--danger {\n    background: rgba(var(--c-danger), 1);\n    color: #000; }\n    .button--danger svg {\n      fill: #000; }\n  .button--info {\n    background: rgba(var(--c-info), 1);\n    color: #000; }\n    .button--info svg {\n      fill: #000; }\n  .button--interactive {\n    background: rgba(var(--c-interactive), 1);\n    color: #000; }\n    .button--interactive svg {\n      fill: #000; }\n  .button:hover, .button:active {\n    color: #000; }\n  .button:hover {\n    box-shadow: 0 0 1px 2px rgba(0, 0, 0, 0.1); }\n  .button:active {\n    box-shadow: inset 0 2px 2px 2px rgba(0, 0, 0, 0.1); }\n  .button:focus {\n    box-shadow: 0 0 1px 2px rgba(var(--c-interactive), 1); }\n  .button:active:focus {\n    box-shadow: 0 0 1px 2px rgba(var(--c-interactive), 1);\n    box-shadow: inset 0 2px 2px 2px rgba(0, 0, 0, 0.1); }\n  .button.loading {\n    visibility: hidden; }\n    .button.loading::after {\n      visibility: visible;\n      display: block;\n      position: absolute;\n      content: '';\n      width: 32px;\n      height: 32px;\n      top: 50%;\n      left: 50%;\n      margin-top: -16px;\n      margin-left: -16px;\n      border-radius: 50%;\n      border: 2px solid rgba(var(--c-black), 1);\n      border-top: 2px solid rgba(var(--c-white), 1);\n      animation: loading-spin 1s infinite linear; }\n\n@keyframes loading-spin {\n  100% {\n    transform: rotate(360deg); } }\n\n/* Create button sizes. First in the map should be an empty key like ('': 2), others with '--' prefix like ('--small': 1) */\n/* Font-size cannot be less than $font-size-base (basically 1rem), so it is checking it */\n.button {\n  font-size: 16px;\n  padding: 16px 24px; }\n  .button.button--icon {\n    padding-left: 80px; }\n  .button.button--icon-only {\n    height: 56px;\n    width: 56px; }\n  .button.button--icon > .icon,\n  .button.button--icon-only > .icon {\n    width: 32px;\n    height: 32px;\n    margin-top: -16px; }\n  .button.button--icon > .icon {\n    left: 24px; }\n  .button.button--icon-only > .icon {\n    left: 50%;\n    margin-left: -16px; }\n\n.button--small {\n  font-size: 12px;\n  padding: 12px 18px; }\n  .button--small.button--icon {\n    padding-left: 60px; }\n  .button--small.button--icon-only {\n    height: 42px;\n    width: 42px; }\n  .button--small.button--icon > .icon,\n  .button--small.button--icon-only > .icon {\n    width: 24px;\n    height: 24px;\n    margin-top: -12px; }\n  .button--small.button--icon > .icon {\n    left: 18px; }\n  .button--small.button--icon-only > .icon {\n    left: 50%;\n    margin-left: -12px; }\n\n.button--large {\n  font-size: 24px;\n  padding: 24px 36px; }\n  .button--large.button--icon {\n    padding-left: 120px; }\n  .button--large.button--icon-only {\n    height: 84px;\n    width: 84px; }\n  .button--large.button--icon > .icon,\n  .button--large.button--icon-only > .icon {\n    width: 48px;\n    height: 48px;\n    margin-top: -24px; }\n  .button--large.button--icon > .icon {\n    left: 36px; }\n  .button--large.button--icon-only > .icon {\n    left: 50%;\n    margin-left: -24px; }\n\n/* Form elements rules */\n/* We need to keep semantic of a fieldset, but get rid of styling */\nfieldset {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  outline: 0;\n  display: flex;\n  flex-direction: column; }\n\n/* Reset form properties */\nform {\n  width: 100%; }\n\n/* Custom checkboxes */\n.label--checkbox {\n  position: relative;\n  display: block;\n  height: 2rem;\n  padding-left: 32px;\n  cursor: pointer; }\n\ninput[type=\"checkbox\"] + .checkbox {\n  content: '';\n  position: absolute;\n  left: 0.1em;\n  top: 0.2em;\n  width: 1em;\n  height: 1em;\n  display: flex;\n  box-shadow: 0 0 0 0.1em #ccc;\n  background: #fff;\n  pointer-events: none; }\n  input[type=\"checkbox\"] + .checkbox span.icon {\n    top: 0;\n    width: inherit;\n    height: inherit;\n    visibility: hidden; }\n\ninput[type=\"checkbox\"]:checked + .checkbox {\n  box-shadow: 0 0 0 0.1em #8d8d8d; }\n  input[type=\"checkbox\"]:checked + .checkbox span.icon {\n    visibility: visible; }\n\ninput[type=\"checkbox\"]:focus + .checkbox,\ninput[type=\"checkbox\"]:focus:checked + .checkbox {\n  box-shadow: 0 0 0 0.1em #8d8d8d, 0 0 0 0.2em #4460ff; }\n\ninput[type=\"checkbox\"]:disabled + .checkbox {\n  box-shadow: 0 0 0 0.1em #e2e2e2; }\n\ninput[type=\"checkbox\"]:disabled:checked + .checkbox span.icon svg.icon__svg {\n  fill: #e2e2e2; }\n\n/* Text inputs */\ninput[type=\"email\"],\ninput[type=\"file\"],\ninput[type=\"image\"],\ninput[type=\"password\"],\ninput[type=\"range\"],\ninput[type=\"search\"],\ninput[type=\"tel\"],\ninput[type=\"text\"],\ninput[type=\"url\"] {\n  width: 100%; }\n\ninput {\n  position: relative;\n  height: 48px;\n  padding: 0 16px; }\n\ntextarea {\n  width: 100%;\n  height: 16rem;\n  line-height: 2rem;\n  padding: 1rem 16px;\n  resize: none; }\n\n/* Form field */\n.form-field {\n  padding: 0;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column; }\n  .form-field .field-label {\n    padding-bottom: 16px; }\n  .form-field .field-input {\n    position: relative; }\n    .form-field .field-input input {\n      height: 4rem; }\n    .form-field .field-input .field-l,\n    .form-field .field-input .field-r {\n      position: absolute;\n      top: 0; }\n      .form-field .field-input .field-l .field-icon,\n      .form-field .field-input .field-l .field-button,\n      .form-field .field-input .field-r .field-icon,\n      .form-field .field-input .field-r .field-button {\n        position: relative;\n        margin: 0;\n        width: 4rem;\n        height: 4rem;\n        display: inline-flex;\n        justify-content: center;\n        align-items: center; }\n        .form-field .field-input .field-l .field-icon span.icon,\n        .form-field .field-input .field-l .field-button span.icon,\n        .form-field .field-input .field-r .field-icon span.icon,\n        .form-field .field-input .field-r .field-button span.icon {\n          width: 3rem;\n          height: 3rem; }\n      .form-field .field-input .field-l .field-button,\n      .form-field .field-input .field-r .field-button {\n        border: 0;\n        background: none;\n        cursor: pointer; }\n    .form-field .field-input .field-l {\n      left: 0; }\n    .form-field .field-input .field-r {\n      right: 0; }\n  .form-field .field-error {\n    min-height: 2rem;\n    margin-top: 16px;\n    color: red; }\n\n/* Nice label */\n.form-field.nice-label .field-label {\n  position: absolute;\n  z-index: +1;\n  width: 100%;\n  height: 4rem;\n  padding-bottom: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  display: flex;\n  align-items: center;\n  pointer-events: none;\n  transition: transform 0.2s; }\n  .form-field.nice-label .field-label.moved {\n    transform: translateY(-2rem); }\n    .form-field.nice-label .field-label.moved label {\n      background: #fff; }\n\n.form-field.nice-label input::placeholder,\n.form-field.nice-label textarea::placeholder {\n  opacity: 0;\n  transition: opacity 0.1s; }\n\n.form-field.nice-label input:focus::placeholder,\n.form-field.nice-label textarea:focus::placeholder {\n  opacity: 1; }\n\n/* Nice label: no-js fix */\nhtml.no-js .form-field.nice-label .field-label {\n  transform: translateY(-2rem); }\n  html.no-js .form-field.nice-label .field-label label {\n    background: #fff; }\n\n/* Paddings on icon and buttons */\n.f--li input,\n.f--lb input,\n.f--li textarea,\n.f--lb textarea,\n.field-label.f--li,\n.field-label.f--lb {\n  padding-left: 4rem !important; }\n\n.f--li.f--lb input,\n.f--li.f--lb textarea,\n.field-label.f--li.f--lb {\n  padding-left: 9rem !important; }\n\n.f--ri input,\n.f--rb input,\n.f--ri textarea,\n.f--rb textarea,\n.field-label.f--ri,\n.field-label.f--rb {\n  padding-right: 4rem !important; }\n\n.f--ri.f--rb input,\n.f--ri.f--rb textarea,\n.field-label.f--ri.f--rb {\n  padding-right: 9rem !important; }\n\n.icon {\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  /* Styling according to \"default\" color scheme */\n  /* Creates classes like .icon--COLORNAME */ }\n  .icon__svg {\n    display: block;\n    width: inherit;\n    height: inherit;\n    fill: #000; }\n  .icon--empty {\n    border-radius: 50%;\n    background: #ddd; }\n  .icon--brand .icon__svg {\n    fill: rgba(var(--c-brand), 1); }\n  .icon--accent .icon__svg {\n    fill: rgba(var(--c-accent), 1); }\n  .icon--success .icon__svg {\n    fill: rgba(var(--c-success), 1); }\n  .icon--warning .icon__svg {\n    fill: rgba(var(--c-warning), 1); }\n  .icon--danger .icon__svg {\n    fill: rgba(var(--c-danger), 1); }\n  .icon--info .icon__svg {\n    fill: rgba(var(--c-info), 1); }\n  .icon--interactive .icon__svg {\n    fill: rgba(var(--c-interactive), 1); }\n\nfigure {\n  margin: 0; }\n\nfigure,\npicture,\nimg {\n  width: 100%;\n  height: auto;\n  vertical-align: middle; }\n","/* *\n *\n * Generate custom styles to assets/custom.css\n *\n * */\n\n/* Import settings */\n@import \"../__config/config\";\n\n/* Import global functions and mixins */\n@import \"__global/_colors.sass\";\n@import \"__global/_grid.sass\";\n@import \"__global/_spacers.sass\";\n@import \"__global/_typography.sass\";\n\n/* Import custom styles for components, layouts and pages */\n@import \"/Users/oreo/Desktop/lemoneezee/src/components/alerts/_alerts.sass\";\n@import \"/Users/oreo/Desktop/lemoneezee/src/components/buttons/_buttons.sass\";\n@import \"/Users/oreo/Desktop/lemoneezee/src/components/form-fields/_form-fields.sass\";\n@import \"/Users/oreo/Desktop/lemoneezee/src/components/header/_header.sass\";\n@import \"/Users/oreo/Desktop/lemoneezee/src/components/icons/_icons.sass\";\n@import \"/Users/oreo/Desktop/lemoneezee/src/components/images/_images.sass\";\n@import \"/Users/oreo/Desktop/lemoneezee/src/layouts/_layout-example.sass\";\n@import \"/Users/oreo/Desktop/lemoneezee/src/pages/_page-example.sass\";\n","/* Automatically generate upon config.json */\n/* Colors */\n$c-white: #ffffff;\n$c-black: #0b0b0b;\n$c-brand: #fff500;\n$c-accent: rgb(56, 188, 25);\n$c-success: hsl(136, 79%, 45%);\n$c-warning: #dae21e;\n$c-danger: #e80f0f;\n$c-info: #0080ff;\n$c-interactive: #178ee5;\n$base-adjust-steps: 10;\n$map-color-schemes: (default: (brand: #fff500, accent: rgb(56, 188, 25), success: hsl(136, 79%, 45%), warning: #dae21e, danger: #e80f0f, info: #0080ff, interactive: #178ee5), alternative: (brand: #0089ff, success: #4fc970, warning: #b1b907, danger: #ea3838, info: #237cd4));\n$scheme-adjust-steps: 5;\n$color-guides: #ff0080;\n/* Grid */\n$bpt_first: xs;\n$bpt_last: xl;\n$xs: 0px;\n$sm: 576px;\n$md: 768px;\n$lg: 992px;\n$xl: 1200px;\n$xs-max: $sm - 1;\n$sm-max: $md - 1;\n$md-max: $lg - 1;\n$lg-max: $xl - 1;\n$xl-max: 99999px;\n$bpts: (xs: $xs, sm: $sm, md: $md, lg: $lg, xl: $xl);\n$bpts-max: (xs: $xs-max, sm: $sm-max, md: $md-max, lg: $lg-max, xl: $xl-max);\n$layout-min-width: 320px;\n$grid-columns: 16;\n$wrapper-gutters: (xs: 16px, sm: 0, lg: 32px);\n$container-gutters: false;\n$row-gutters: false;\n$col-gutters: (xs: 8px, md: 16px);\n$fix-wrapper-width: (md, xl);\n$map-rotate-back: false;\n/* Spacers */\n$spacer: 8px;\n$map-spacers: (a: (xs: 1), b: (xs: 2, sm: 3), c: (xs: 4), d: (xs: 6), e: (xs: 10));\n$container-default-margin-y: false;\n$row-default-margin-y: (b: y);\n$col-default-margin-y: false;\n$default-col-padding: false;\n/* Typography */\n$fonts-include: ('Consolas-Regular': 400, 'Consolas-Bold': 700);\n$fonts-google: ();\n$font-main: Consolas-Regular;\n$font-style: sans-serif;\n$html-font-size: 12px;\n$font-size-base: 1rem;\n$line-height-base: 1.5;\n$font-weight-base: normal;\n","/* *\n *\n * Global functions and mixins to operate with colors\n *\n * */\n\n/* Functions ---------------------------------------------------------------------------------------*/\n\n/* Returns css var according to color scheme. Fallback is defined in config.json */\n\n@function color($color-name, $opacity: 1) {\n  @return rgba(var(--c-#{$color-name}), $opacity); }\n\n\n/* Mixins ------------------------------------------------------------------------------------------*/\n","/* *\n *\n * Global functions and mixins to assist working with grid or other layout elements\n *\n * */\n\n/* Functions ---------------------------------------------------------------------------------------*/\n\n\n/* Mixins ------------------------------------------------------------------------------------------*/\n\n\n/* Media queries\n *\n * Example: 'md' breakpoint = 768px, 'lg' = 992px, so:\n *\n * +screen(md)       —   768px   <=   screen                    // so it starts FROM md and higher\n * +screen-max(md)   —   0       <    screen   <=   991px      // so it is from 0 up to INCLUDING MD\n * +screen-only(md)  —   768px   <=   screen   <=   991px\n *\n * */\n\n@mixin screen($bpt, $orientation: null) {\n  @if map-has-key($bpts, $bpt) {\n    @if ($orientation) {\n      @media only screen and (min-width: #{(map-get($bpts, $bpt))}) and (orientation: $orientation) {\n        @content; } }\n    @else {\n      @media only screen and (min-width: #{(map-get($bpts, $bpt))}) {\n        @content; } } } }\n\n@mixin screen-max($bpt, $orientation: null) {\n  @if map-has-key($bpts-max, $bpt) {\n    @if ($orientation) {\n      @media only screen and (max-width: #{(map-get($bpts-max, $bpt))}) and (orientation: $orientation) {\n        @content; } }\n    @else {\n      @media only screen and (max-width: #{(map-get($bpts-max, $bpt))}) {\n        @content; } } } }\n\n@mixin screen-only($bpt, $orientation: null) {\n  @if $bpt == $bpt_last {\n    @if ($orientation) {\n      @media only screen and (min-width: #{(map-get($bpts, $bpt_last))}) and (orientation: $orientation) {\n        @content; } }\n    @else {\n      @media only screen and (min-width: #{(map-get($bpts, $bpt_last))}) {\n        @content; } } }\n  @else {\n    @if (map-has-key($bpts, $bpt) and map-has-key($bpts-max, $bpt)) {\n      @if ($orientation) {\n        @media only screen and (min-width: #{(map-get($bpts, $bpt))}) and (max-width: #{(map-get($bpts-max, $bpt))}) and (orientation: $orientation) {\n          @content; } }\n      @else {\n        @media only screen and (min-width: #{(map-get($bpts, $bpt))}) and (max-width: #{(map-get($bpts-max, $bpt))}) {\n          @content; } } } } }\n\n\n/* Portrait and Landscape screens */\n\n@mixin screen-pt {\n  @media only screen and (orientation: portrait) {\n    @content; } }\n\n@mixin screen-ls {\n  @media only screen and (orientation: landscape) {\n    @content; } }\n\n\n/* IE and Edge */\n\n@mixin ie {\n  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    @content; } }\n\n@mixin edge {\n  @supports (-ms-ime-align:auto) {\n    @content; } }\n\n\n/* *\n *\n * Hide content. With option 'only' works only on exact breakpoint. Option 'only' can have any value, e.g. '+hide(sm, any word)'\n *\n * */\n\n@mixin hide($bpt, $only: null) {\n  @if map-has-key($bpts, $bpt) {\n    @if ($only) {\n      @include screen-only($bpt) {\n        display: none; } }\n    @else {\n      @include screen($bpt) {\n        display: none; } } } }\n\n\n/* *\n *\n * Keep fixed width for .col-*-* at minimum breakpoint width.\n * Use for first col in row only!\n *\n * */\n\n@mixin fixed-width-bpt($screen: null) {\n  @if $screen {\n    @include screen($screen) {\n      max-width: map-get($bpts, $screen);\n      flex-basis: 0 0 map-get($bpts, $screen); } } }\n\n\n/* Floats for .col-*-* */\n\n@mixin float-right {\n  margin-left: auto !important;\n  right: 0; }\n\n@mixin float-bottom {\n  margin-top: auto !important;\n  bottom: 0; }\n","/* *\n *\n * Global functions and mixins for keeping margins in paddings in one size system\n *\n * */\n\n/* Functions ---------------------------------------------------------------------------------------*/\n\n/* *\n *\n * Returns calculated space based on $spacer (8px by default).\n * Shoule be used carefully when predefined margins and paddings are not enough\n *\n * */\n\n@function space($step) {\n  @return $step * $spacer; }\n\n\n/* Mixins ------------------------------------------------------------------------------------------*/\n\n/* Margins and paddings, but don't use it for .wrapper and .container */\n\n@mixin margin-prepare($type, $space) {\n  $space: space($space);\n  @if $type == x {\n    margin-left: $space;\n    margin-right: $space; }\n  @else if $type == y {\n    margin-top: $space;\n    margin-bottom: $space; }\n  @else if $type == t {\n    margin-top: $space; }\n  @else if $type == b {\n    margin-bottom: $space; }\n  @else if $type == l {\n    margin-left: $space; }\n  @else if $type == r {\n    margin-right: $space; }\n  @else {\n    margin: $space $space; } }\n\n@mixin margin($type: b, $size: a) {\n  $basic-space: map-get($map-spacers, $size);\n  @each $bpt, $space in $basic-space {\n    @if $bpt == $bpt_first {\n      @include margin-prepare($type, $space); }\n    @else {\n      @include screen($bpt) {\n        @include margin-prepare($type, $space); } } } }\n\n\n/* Type 'stretch' is good for horizontally grown element, 'squish' — for vertically grown */\n\n@mixin padding-prepare($type, $space) {\n  $space: space($space);\n  @if $type == stretch {\n    padding: ($space / 2) $space; }\n  @else if $type == squish {\n    padding: $space ($space / 2); }\n  @else if $type == x {\n    padding-left: $space;\n    padding-right: $space; }\n  @else if $type == y {\n    padding-top: $space;\n    padding-bottom: $space; }\n  @else if $type == t {\n    padding-top: $space; }\n  @else if $type == b {\n    padding-bottom: $space; }\n  @else if $type == l {\n    padding-left: $space; }\n  @else if $type == r {\n    padding-right: $space; }\n  @else {\n    padding: $space $space; } }\n\n@mixin padding($type: square, $size: a) {\n  $basic-space: map-get($map-spacers, $size);\n  @each $bpt, $space in $basic-space {\n    @if $bpt == $bpt_first {\n      @include padding-prepare($type, $space); }\n    @else {\n      @include screen($bpt) {\n        @include padding-prepare($type, $space); } } } }\n","/* *\n *\n * Global functions and mixins for typography.\n * Multipliers for functions should be quarters or at least halfs (1.25, 1.5) to keep the rhythm.\n * But at the end of the day it is already a part of design so it is totally up to you\n *\n * */\n\n/* Functions ---------------------------------------------------------------------------------------*/\n\n/* Returns calculated font-size based on 'font-size-base' in config.json */\n\n@function font-s($multiplier) {\n  @return $font-size-base * $multiplier; }\n\n\n/* Returns calculated line-height based on 'line-height-base' in config.json  */\n\n@function line-h($multiplier) {\n  @return $line-height-base * $multiplier; }\n\n\n/* Mixins ------------------------------------------------------------------------------------------*/\n",".alert {\n\t@include margin(y, a);\n\t@include padding(stretch, b);\n\tposition: relative;\n\tdisplay: inline-block;\n\tline-height: 150%;\n\tbackground: color(gray-1);\n\tcolor: color(black);\n\tborder-radius: 4px;\n\n\t& span.icon {\n\t\twidth: 24px;\n\t\theight: 24px;\n\t\tmargin-right: space(3);\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 24px;\n\t\tmargin-top: -12px;\n\t\tmargin-left: -12px; }\n\n\t&--fullwidth {\n\t\twidth: 100%; }\n\n\t&--has-icon {\n\t\tpadding-left: 48px; }\n\n\n\t// Alert styles according to __base/__config/_settings.sass/$map-color-schemes\n\t// If needed, define same styles or another ones below\n\n\t@each $c-color-name, $c-color-value in map-get($map-color-schemes, 'default') {\n\t\t&--#{$c-color-name} {\n\t\t\tbackground: color(#{$c-color-name}-l-#{$scheme-adjust-steps});\n\t\t\tcolor: color(#{$c-color-name}-d-#{$scheme-adjust-steps});\n\n\t\t\t& svg {\n\t\t\t\tfill: color(#{$c-color-name}-d-#{$scheme-adjust-steps}); } } } }\n","/* Define basic button styles, which don't depend on sizes */\n\n.button {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: auto;\n  margin-bottom: 16px;\n  line-height: 150%;\n  vertical-align: top;\n  border: 0;\n  border-radius: 4px;\n  outline: 0;\n  cursor: pointer;\n  transform-origin: center center;\n  transition: all 0.05s;\n  background: #ccc;\n\n  &--icon-only {\n    padding: 0;\n    overflow: hidden; }\n\n  &--icon > .icon,\n  &--icon-only > .icon {\n    position: absolute;\n    top: 50%; }\n\n  &--icon-only > .icon {\n    left: 50%; }\n\n  &--round.button--icon-only {\n    border-radius: 50%; }\n\n  & > span.desc {\n    display: block;\n    font-size: 0.75em; }\n\n  &[disabled] {\n    cursor: not-allowed;\n    pointer-events: none;\n    opacity: 0.85;\n\n    & > .icon {\n      opacity: 0.5; } }\n\n\n  /* Styling according to the \"default\" color scheme. Affects on svg icons too */\n  /* Creates classes like .button--COLORNAME */\n\n  @each $c-color-name, $c-color-value in map-get($map-color-schemes, 'default') {\n    &--#{$c-color-name} {\n      background: color($c-color-name);\n      color: #000;\n\n      & svg {\n        fill: #000; } } }\n\n\n  /* Button States */\n\n  &:hover,\n  &:active {\n    color: #000; }\n\n  &:hover {\n    box-shadow: 0 0 1px 2px rgba(0, 0, 0, 0.1); }\n\n  &:active {\n    box-shadow: inset 0 2px 2px 2px rgba(0, 0, 0, 0.1); }\n\n  &:focus {\n    box-shadow: 0 0 1px 2px color(interactive); }\n\n  &:active:focus {\n    box-shadow: 0 0 1px 2px color(interactive);\n    box-shadow: inset 0 2px 2px 2px rgba(0, 0, 0, 0.1); }\n\n\n  /* Loading class */\n\n  &.loading {\n    visibility: hidden;\n\n    &::after {\n      visibility: visible;\n      display: block;\n      position: absolute;\n      content: '';\n      width: 32px;\n      height: 32px;\n      top: 50%;\n      left: 50%;\n      margin-top: -16px;\n      margin-left: -16px;\n      border-radius: 50%;\n      border: 2px solid color(black);\n      border-top: 2px solid color(white);\n      animation: loading-spin 1s infinite linear;\n\n      @keyframes loading-spin {\n        100% {\n          transform: rotate(360deg); } } } } }\n\n\n/* Create button sizes. First in the map should be an empty key like ('': 2), others with '--' prefix like ('--small': 1) */\n/* Font-size cannot be less than $font-size-base (basically 1rem), so it is checking it */\n\n$map-button-base: ('': 2, '--small': 1.5, '--large': 3);\n\n@each $button-class, $button-size in $map-button-base {\n  $button-base: space($button-size);\n  .button#{$button-class} {\n    font-size: $button-base;\n    padding: $button-base $button-base * 1.5;\n\n    &.button--icon {\n      padding-left: $button-base * 5; }\n\n    &.button--icon-only {\n      height: $button-base * 3.5;\n      width: $button-base * 3.5; }\n\n    &.button--icon > .icon,\n    &.button--icon-only > .icon {\n      width: $button-base * 2;\n      height: $button-base * 2;\n      margin-top: -$button-base; }\n\n    &.button--icon > .icon {\n      left: $button-base * 1.5; }\n\n    &.button--icon-only > .icon {\n      left: 50%;\n      margin-left: -$button-base; } } }\n","/* Form elements rules */\n\n$input-height: 4rem;\n\n/* We need to keep semantic of a fieldset, but get rid of styling */\n\nfieldset {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  outline: 0;\n  display: flex;\n  flex-direction: column; }\n\n\n/* Reset form properties */\n\nform {\n  width: 100%; }\n\n\n/* Custom checkboxes */\n\n.label--checkbox {\n  position: relative;\n  display: block;\n  height: $input-height / 2;\n  padding-left: space(4);\n  cursor: pointer; }\n\ninput[type=\"checkbox\"] {\n\n  & + .checkbox {\n    content: '';\n    position: absolute;\n    left: 0.1em;\n    top: 0.2em;\n    width: 1em;\n    height: 1em;\n    display: flex;\n    box-shadow: 0 0 0 0.1em #ccc;\n    background: #fff;\n    pointer-events: none;\n\n    & span.icon {\n      top: 0;\n      width: inherit;\n      height: inherit;\n      visibility: hidden; } }\n\n  &:checked + .checkbox {\n    box-shadow: 0 0 0 0.1em #8d8d8d;\n\n    & span.icon {\n      visibility: visible; } }\n\n  &:focus + .checkbox,\n  &:focus:checked + .checkbox {\n    box-shadow: 0 0 0 0.1em #8d8d8d, 0 0 0 0.2em #4460ff; }\n\n  &:disabled + .checkbox {\n    box-shadow: 0 0 0 0.1em #e2e2e2; }\n\n  &:disabled:checked + .checkbox span.icon svg.icon__svg {\n    fill: #e2e2e2; } }\n\n\n/* Text inputs */\n\ninput[type=\"email\"],\ninput[type=\"file\"],\ninput[type=\"image\"],\ninput[type=\"password\"],\ninput[type=\"range\"],\ninput[type=\"search\"],\ninput[type=\"tel\"],\ninput[type=\"text\"],\ninput[type=\"url\"] {\n  width: 100%; }\n\ninput {\n  position: relative;\n  height: space(6);\n  padding: 0 space(2); }\n\ntextarea {\n  width: 100%;\n  height: $input-height * 4;\n  line-height: $input-height / 2;\n  padding: $input-height / 4 space(2);\n  resize: none; }\n\n\n/* Form field */\n\n.form-field {\n  padding: 0;\n  margin-bottom: space(4);\n  display: flex;\n  flex-direction: column;\n\n  .field-label {\n    padding-bottom: space(2); }\n\n  .field-input {\n    position: relative;\n\n    & input {\n      height: $input-height; }\n\n    & .field-l,\n    & .field-r {\n      position: absolute;\n      top: 0;\n\n      & .field-icon,\n      & .field-button {\n        position: relative;\n        margin: 0;\n        width: $input-height;\n        height: $input-height;\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n\n        & span.icon {\n          width: $input-height * 0.75;\n          height: $input-height * 0.75; } }\n\n      & .field-button {\n        border: 0;\n        background: none;\n        cursor: pointer; } }\n\n    & .field-l {\n      left: 0; }\n\n    & .field-r {\n      right: 0; } }\n\n  .field-error {\n    min-height: 2rem;\n    margin-top: space(2);\n    color: red; } }\n\n\n/* Nice label */\n\n.form-field.nice-label {\n\n  & .field-label {\n    position: absolute;\n    z-index: +1;\n    width: 100%;\n    height: $input-height;\n    padding-bottom: 0;\n    padding-left: space(2);\n    padding-right: space(2);\n    display: flex;\n    align-items: center;\n    pointer-events: none;\n    transition: transform 0.2s;\n\n    &.moved {\n      transform: translateY(-$input-height / 2);\n\n      & label {\n        background: #fff; } } }\n\n  & input::placeholder,\n  & textarea::placeholder {\n    opacity: 0;\n    transition: opacity 0.1s; }\n\n  & input:focus::placeholder,\n  & textarea:focus::placeholder {\n    opacity: 1; } }\n\n\n/* Nice label: no-js fix */\n\nhtml.no-js .form-field.nice-label .field-label {\n  transform: translateY(-$input-height / 2);\n\n  & label {\n    background: #fff; } }\n\n\n/* Paddings on icon and buttons */\n\n.f--li input,\n.f--lb input,\n.f--li textarea,\n.f--lb textarea,\n.field-label.f--li,\n.field-label.f--lb {\n  padding-left: $input-height !important; }\n\n.f--li.f--lb input,\n.f--li.f--lb textarea,\n.field-label.f--li.f--lb {\n  padding-left: $input-height * 2.25 !important; }\n\n.f--ri input,\n.f--rb input,\n.f--ri textarea,\n.f--rb textarea,\n.field-label.f--ri,\n.field-label.f--rb {\n  padding-right: $input-height !important; }\n\n.f--ri.f--rb input,\n.f--ri.f--rb textarea,\n.field-label.f--ri.f--rb {\n  padding-right: $input-height * 2.25 !important; }\n",".icon {\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n\n  &__svg {\n    display: block;\n    width: inherit;\n    height: inherit;\n    fill: #000; }\n\n  &--empty {\n    border-radius: 50%;\n    background: #ddd; }\n\n\n  /* Styling according to \"default\" color scheme */\n  /* Creates classes like .icon--COLORNAME */\n\n  @each $c-color-name, $c-color-value in map-get($map-color-schemes, 'default') {\n    &--#{$c-color-name} .icon__svg {\n      fill: color(#{$c-color-name}); } } }\n","figure {\n  margin: 0; }\n\nfigure,\npicture,\nimg {\n  width: 100%;\n  height: auto;\n  vertical-align: middle; }\n"]}